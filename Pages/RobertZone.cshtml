@page
@model RobertZoneModel
@{
    ViewData["Title"] = "Robert's Zone";
}
<h1>@ViewData["Title"]</h1>

<div class="container">
    <div class="row">
        <div class="col-lg-8">
            <h2>üèóÔ∏è Microservice Architecture Pattern</h2>
            <p class="lead">Welcome to Robert's Zone! Here's a comprehensive overview of the microservice pattern and its key concepts.</p>
            
            <h3>What are Microservices?</h3>
            <p>Microservices are a software architecture pattern where applications are built as a collection of loosely coupled, independently deployable services. Each service is:</p>
            <ul>
                <li><strong>Small and focused</strong> - Each service has a single business responsibility</li>
                <li><strong>Independently deployable</strong> - Services can be deployed without affecting others</li>
                <li><strong>Technology agnostic</strong> - Different services can use different technologies</li>
                <li><strong>Decentralized</strong> - Services manage their own data and business logic</li>
            </ul>

            <h3>üéØ Key Benefits</h3>
            <div class="row">
                <div class="col-md-6">
                    <h5>Scalability</h5>
                    <p>Scale individual services based on demand rather than the entire application.</p>
                </div>
                <div class="col-md-6">
                    <h5>Flexibility</h5>
                    <p>Use different technologies and frameworks for different services as needed.</p>
                </div>
                <div class="col-md-6">
                    <h5>Resilience</h5>
                    <p>Failure in one service doesn't necessarily bring down the entire system.</p>
                </div>
                <div class="col-md-6">
                    <h5>Team Independence</h5>
                    <p>Different teams can own and develop services independently.</p>
                </div>
            </div>

            <h3>üîß Common Patterns</h3>
            <div class="card-deck">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">API Gateway</h5>
                        <p class="card-text">Single entry point for all client requests, handling routing, authentication, and load balancing.</p>
                    </div>
                </div>
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Service Discovery</h5>
                        <p class="card-text">Mechanism for services to find and communicate with each other dynamically.</p>
                    </div>
                </div>
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Circuit Breaker</h5>
                        <p class="card-text">Prevents cascading failures by monitoring service calls and failing fast when necessary.</p>
                    </div>
                </div>
            </div>

            <h3>‚ö†Ô∏è Considerations</h3>
            <div class="alert alert-info" role="alert">
                <h5>Trade-offs to Consider:</h5>
                <ul class="mb-0">
                    <li><strong>Complexity:</strong> Distributed systems introduce operational complexity</li>
                    <li><strong>Network latency:</strong> Inter-service communication over the network</li>
                    <li><strong>Data consistency:</strong> Managing transactions across multiple services</li>
                    <li><strong>Testing:</strong> Integration testing becomes more challenging</li>
                </ul>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5>üöÄ Quick Reference</h5>
                </div>
                <div class="card-body">
                    <h6>When to Use Microservices:</h6>
                    <ul>
                        <li>Large, complex applications</li>
                        <li>Multiple development teams</li>
                        <li>Need for independent scaling</li>
                        <li>Different technology requirements</li>
                    </ul>
                    
                    <h6>When to Avoid:</h6>
                    <ul>
                        <li>Small applications</li>
                        <li>Limited team size</li>
                        <li>Simple business domains</li>
                        <li>Tight coupling requirements</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>